<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2019/07/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>内容 </p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>内容</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/14/hello-world/"/>
      <url>/2019/07/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PSR-1100光谱仪数据处理</title>
      <link href="/2018/09/20/PSR-1100%E5%85%89%E8%B0%B1%E4%BB%AA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2018/09/20/PSR-1100%E5%85%89%E8%B0%B1%E4%BB%AA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="PSR1100光谱仪图像绘制代码"><a href="#PSR1100光谱仪图像绘制代码" class="headerlink" title="PSR1100光谱仪图像绘制代码"></a>PSR1100光谱仪图像绘制代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"><span class="comment"># python 3.5.4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PsrSpectrum</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, dir)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.loadasjson()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.name, self.dir = name, dir</span><br><span class="line">            self.file2obj()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转化sed文件到specturm对象，传入参数路径file_dir和名称file_name</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file2obj</span><span class="params">(self)</span>:</span>                </span><br><span class="line">        file = os.path.join(self.dir,self.name)         <span class="comment">#拼接得到文件路径</span></span><br><span class="line">        <span class="keyword">with</span> open(file,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f]      <span class="comment">#使用strip()函数去除换行符</span></span><br><span class="line">        self.num = content[<span class="number">2</span>][<span class="number">-9</span>:<span class="number">-4</span>]</span><br><span class="line">        self.name = self.name[:<span class="number">-4</span>]  </span><br><span class="line">        content = [tuple(l.replace(<span class="string">' '</span>,<span class="string">''</span>).split(<span class="string">'\t'</span>)) <span class="keyword">for</span> l <span class="keyword">in</span> content] </span><br><span class="line">        <span class="comment"># 删除行中的空格，利用制表符\t ，拆分字符串生成列表   </span></span><br><span class="line">        self.Data = content[<span class="number">27</span>:]                             <span class="comment">#临时变量Dta包含实验数据</span></span><br><span class="line">        self.wvl, self.rad_ref, self.rad_target, self.ref = [], [], [], []      </span><br><span class="line">        <span class="comment"># 白板、地物光谱辐亮度rad_ref、rad_target,反射率ref</span></span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> self.Data:                                  <span class="comment">#依次遍历</span></span><br><span class="line">            <span class="keyword">try</span>:                                        </span><br><span class="line">                self.rad_target.append(<span class="number">100</span>*float(t[<span class="number">2</span>]))   </span><br><span class="line">                <span class="comment"># 原光谱辐亮度数据单位是w/m^2/nm/sr，乘100转换为μw/cm^2/nm/sr</span></span><br><span class="line">                self.rad_ref.append(<span class="number">100</span>*float(t[<span class="number">1</span>]))</span><br><span class="line">                <span class="comment">#s.ref.append((float(t[2])/float(t[1])),4)</span></span><br><span class="line">                self.ref.append(float(((Decimal(t[<span class="number">2</span>])  *<span class="number">100</span>)/Decimal(t[<span class="number">1</span>]))))    </span><br><span class="line">                <span class="comment"># 利用Decimal模块控制精度</span></span><br><span class="line">                self.wvl.append(float(t[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.ref.append(float(t[<span class="number">1</span>]))</span><br><span class="line">                self.wvl.append(float(t[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadasjson</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(self.dir, <span class="string">'json'</span>,self.name+<span class="string">'.json'</span>),<span class="string">'r'</span>) <span class="keyword">as</span> js:</span><br><span class="line">            jsondict = json.load(js)</span><br><span class="line">        self.name, self.dir, self.wvl, self.ref, self.rad_ref, \</span><br><span class="line">        self.rad_target = jsondict[<span class="string">'name'</span>], jsondict[<span class="string">'dir'</span>], jsondict[<span class="string">'wvl'</span>], \</span><br><span class="line">        jsondict[<span class="string">'ref'</span>], jsondict[<span class="string">'rad_ref'</span>], jsondict[<span class="string">'rad_target'</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        print(<span class="string">'Save as json done'</span>)  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">saveasjson</span><span class="params">(self)</span>:</span></span><br><span class="line">        dict = &#123;<span class="string">'name'</span>:self.name, <span class="string">'dir'</span>:self.dir,</span><br><span class="line">                <span class="string">'wvl'</span>:self.wvl, <span class="string">'ref'</span>:self.ref, </span><br><span class="line">                <span class="string">'rad_ref'</span>:self.rad_ref, <span class="string">'rad_target'</span>:self.rad_target&#125;</span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(self.dir, <span class="string">'json'</span>, self.name+<span class="string">'.json'</span>),<span class="string">'w'</span>) <span class="keyword">as</span> js:</span><br><span class="line">            json.dump(dict,js)</span><br><span class="line">        print(<span class="string">'Save as json done'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list2array</span><span class="params">(self)</span>:</span></span><br><span class="line">        array = &#123;&#125;</span><br><span class="line">        array[<span class="string">'wvl'</span>] = np.array(self.wvl)                   <span class="comment">#列表list转换为numpy数组array对象</span></span><br><span class="line">        array[<span class="string">'ref'</span>] = np.array(self.ref)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            array[<span class="string">'rad_target'</span>] = np.array(self.rad_target)</span><br><span class="line">            array[<span class="string">'rad_ref'</span>] = np.array(self.rad_ref)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            array[<span class="string">'rad_target'</span>], array[<span class="string">'rad_ref'</span>] = <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span>  array</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plot_picture</span><span class="params">(self)</span>:</span>                            <span class="comment">#利用对象生成图表                              </span></span><br><span class="line">    <span class="comment"># font = FontProperties(fname=r"c:\windows\fonts\simsun.ttc", size=14)  </span></span><br><span class="line">        <span class="comment"># myfont = matplotlib.font_manager.FontProperties(fname=r"c:\windows\fonts\simsun.ttc")</span></span><br><span class="line">        ary = self.list2array()</span><br><span class="line">        fig = plt.figure(figsize=(<span class="number">18</span>,<span class="number">6</span>))        </span><br><span class="line">        <span class="comment">#新建绘图窗口figure，figsize是尺寸，单位英寸，还可加dpi=**</span></span><br><span class="line">        ax1 = fig.add_subplot(<span class="number">121</span>)              <span class="comment">#生成ax1坐标轴</span></span><br><span class="line">        plt.ylim(<span class="number">-10</span>,<span class="number">120</span>)                       <span class="comment">#限定y轴坐标区间</span></span><br><span class="line">        ax1.plot(ary[<span class="string">'wvl'</span>],ary[<span class="string">'ref'</span>],label=<span class="string">"$Reflectance$"</span>,color=<span class="string">"red"</span>,linewidth=<span class="number">1</span>) </span><br><span class="line">        <span class="comment">#绘图。标签label，颜色color，粗细linewidth</span></span><br><span class="line">        ax1.axhline(<span class="number">0</span>)</span><br><span class="line">        ax1.axhline(<span class="number">100</span>)</span><br><span class="line">        ax1.set_xlabel(<span class="string">"Wave lenghth(nm)"</span>)      <span class="comment">#x轴标签</span></span><br><span class="line">        ax1.set_ylabel(<span class="string">"Reflectance(%)"</span>)        <span class="comment">#Y轴标签</span></span><br><span class="line">        plt.legend(loc = <span class="string">'upper left'</span>)            <span class="comment">#图例legend位置</span></span><br><span class="line">        <span class="comment">#标题</span></span><br><span class="line">        plt.title(self.name+<span class="string">'\n'</span>, fontproperties = \</span><br><span class="line">                matplotlib.font_manager.FontProperties(fname=<span class="string">r"c:\windows\fonts\simhei.ttf"</span>,size = <span class="number">24</span>))   </span><br><span class="line">        plt.grid(<span class="literal">True</span>,which=<span class="string">'both'</span>)             <span class="comment">#网格</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ax2 = fig.add_subplot(<span class="number">122</span>)</span><br><span class="line">            <span class="comment"># ax2 = ax1.twinx()                     #同x轴异Y轴</span></span><br><span class="line">            plt.ylim(<span class="number">0</span>,<span class="number">6.5</span>)                           <span class="comment">#限定y轴坐标区间</span></span><br><span class="line">            ax2.set_xlabel(<span class="string">"Wave lenghth(nm)"</span>)</span><br><span class="line">            ax2.set_ylabel(<span class="string">"Spectral Radiance(μw/cm^2/nm/sr)"</span>)</span><br><span class="line">            ax2.plot(ary[<span class="string">'wvl'</span>], ary[<span class="string">'rad_target'</span>], label=<span class="string">"$Rad Target$"</span>,color=<span class="string">"blue"</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">            ax2.plot(ary[<span class="string">'wvl'</span>], ary[<span class="string">'rad_ref'</span>], label=<span class="string">"$Rad Ref$"</span>, color=<span class="string">"010101"</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">            plt.grid(<span class="literal">True</span>)</span><br><span class="line">            plt.legend(loc=<span class="string">'upper right'</span>) </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        plt.savefig(os.path.join(self.dir, <span class="string">'picture'</span>, self.name+<span class="string">'.png'</span>), dpi=<span class="number">220</span>,bbox_inches=<span class="string">'tight'</span>) </span><br><span class="line">        <span class="comment">#输出为图片</span></span><br><span class="line">        print(self.name+<span class="string">'done!'</span>)</span><br><span class="line">        <span class="comment"># plt.show()                            #绘出图像</span></span><br><span class="line">        plt.close()                             <span class="comment">#释放对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectSed</span><span class="params">(fileToRecognize_list)</span>:</span>       <span class="comment">#识别文件是否为sed文件   </span></span><br><span class="line">    selected_list = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> fileToRecognize_list:</span><br><span class="line">        <span class="keyword">if</span> re.match(<span class="string">r'^(.*)\.sed$'</span>, file):</span><br><span class="line">            selected_list.append(file)</span><br><span class="line">    <span class="keyword">return</span> selected_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_spec_dict</span><span class="params">(dir)</span>:</span>    </span><br><span class="line">    file_list = os.listdir(dir)</span><br><span class="line">    file_list.sort()   <span class="comment">########################</span></span><br><span class="line">    file_list = selectSed(file_list)</span><br><span class="line">    spec_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            spec_dict[file] = PsrSpectrum(file, dir)        </span><br><span class="line">            print(spec_dict[file].name)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> spec_dict</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]            </span><br><span class="line">    spec_dict = get_spec_dict(dir)</span><br><span class="line">    <span class="keyword">if</span> spec_dict:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.makedirs(os.path.join(dir, <span class="string">'picture'</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.makedirs(os.path.join(dir, <span class="string">'json'</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> spec_dict.items():</span><br><span class="line">            print(<span class="string">'working"'</span>+key+<span class="string">"\""</span>)</span><br><span class="line">            value.plot_picture()</span><br><span class="line">            value.saveasjson()   </span><br><span class="line">        print(<span class="string">"\nAll done!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"\nDid not find any '.sed' files"</span>)</span><br></pre></td></tr></table></figure><h2 id="MODIS多光谱图像绘制代码"><a href="#MODIS多光谱图像绘制代码" class="headerlink" title="MODIS多光谱图像绘制代码"></a>MODIS多光谱图像绘制代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*- </span></span><br><span class="line"><span class="comment"># python 3.5.4</span></span><br><span class="line"><span class="comment"># 2015180202022 吴禹萱</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> scipy.interpolate <span class="keyword">as</span> itp</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> scipy.interpolate <span class="keyword">as</span> itp</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal </span><br><span class="line"><span class="keyword">from</span> psr <span class="keyword">import</span> PsrSpectrum</span><br><span class="line"><span class="keyword">from</span> psr <span class="keyword">import</span> get_spec_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">integrate</span><span class="params">(y,x)</span>:</span></span><br><span class="line">    dx = x[<span class="number">1</span>]-x[<span class="number">0</span>]</span><br><span class="line">    echelon = (y[<span class="number">1</span>:]+y[:<span class="number">-1</span>])*dx/<span class="number">2</span></span><br><span class="line">    area = sum(echelon)</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dir = os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]    </span><br><span class="line">spec_dict = get_spec_dict(dir)        </span><br><span class="line"><span class="keyword">with</span> open(os.path.join(dir,<span class="string">r'MODIS.txt'</span>)) <span class="keyword">as</span> f:</span><br><span class="line">    content = [line.strip().split(<span class="string">'  '</span>) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line">    content = content[<span class="number">6</span>:]</span><br><span class="line">    print(content)</span><br><span class="line">    wavelengenth, band1, band2, band3 ,band4 = [], [], [], [],[]</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> content:</span><br><span class="line">    print(l[<span class="number">0</span>])</span><br><span class="line">    wavelengenth.append(<span class="number">1000</span>*float(l[<span class="number">0</span>]))</span><br><span class="line">    band1.append(<span class="number">100</span>*float(l[<span class="number">1</span>]))</span><br><span class="line">    band2.append(<span class="number">100</span>*float(l[<span class="number">2</span>]))</span><br><span class="line">    band3.append(<span class="number">100</span>*float(l[<span class="number">3</span>]))</span><br><span class="line">    band4.append(<span class="number">100</span>*float(l[<span class="number">4</span>]))</span><br><span class="line">print(wavelengenth)</span><br><span class="line"></span><br><span class="line">wavelengenth_array=np.array(wavelengenth)</span><br><span class="line">b1_array = np.array(band1)</span><br><span class="line">b2_array = np.array(band2)</span><br><span class="line">b3_array = np.array(band3)</span><br><span class="line">b4_array = np.array(band4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> spec_dict.items():</span><br><span class="line">    a = value.list2array()</span><br><span class="line">    print(a[<span class="string">'wvl'</span>])</span><br><span class="line">    fx = itp.interp1d(a[<span class="string">'wvl'</span>], a[<span class="string">'ref'</span>], <span class="string">'cubic'</span>)</span><br><span class="line">    ref_itp = fx(wavelengenth_array)</span><br><span class="line">    print(ref_itp)</span><br><span class="line">    fx = itp.interp1d(a[<span class="string">'wvl'</span>], a[<span class="string">'rad_target'</span>], <span class="string">'cubic'</span>)</span><br><span class="line">    rad_target_itp = fx(wavelengenth_array)</span><br><span class="line">    <span class="comment"># print(rad_target_itp)</span></span><br><span class="line">    modisx = [<span class="number">465.8</span>, <span class="number">553.3</span>, <span class="number">654.8</span>, <span class="number">861.3</span>]</span><br><span class="line">    modisy = [integrate(b3_array*ref_itp,wavelengenth_array)/ \</span><br><span class="line">            integrate(b3_array,wavelengenth_array), \</span><br><span class="line">            integrate(b4_array*ref_itp,wavelengenth_array)/ \</span><br><span class="line">            integrate(b4_array,wavelengenth_array), \</span><br><span class="line">            integrate(b1_array*ref_itp,wavelengenth_array)/ \</span><br><span class="line">            integrate(b1_array,wavelengenth_array), \</span><br><span class="line">            integrate(b2_array*ref_itp,wavelengenth_array)/ \</span><br><span class="line">            integrate(b2_array,wavelengenth_array),</span><br><span class="line">            ]</span><br><span class="line">    print(modisy)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        os.makedirs(os.path.join(dir, <span class="string">'picture'</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">9</span>))</span><br><span class="line">    chinese = matplotlib.font_manager.FontProperties(fname=<span class="string">r"c:\windows\fonts\simhei.ttf"</span>)</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    <span class="comment"># plt.xlim(300, 1130)</span></span><br><span class="line">    <span class="comment"># plt.ylim()</span></span><br><span class="line">    <span class="comment"># # ax2.plot(wavelengenth_array,ref_itp,label=u"高光谱反射率",color='black',linewidth=1)</span></span><br><span class="line">    <span class="comment"># # ax2.plot(wavelengenth_array,rad_target_itp,label=u"物体反射辐亮度",color='blue',linewidth=1)</span></span><br><span class="line">    <span class="comment"># # ax2.plot(modisx,modisy,'-o', label=u"modis多光谱反射率",color="#FF0000",linewidth=1)</span></span><br><span class="line">    <span class="comment"># # ax2.plot(wavelengenth_array,b3_array*rad_target_itp,label="b3",color="#FF0000",linewidth=1)</span></span><br><span class="line">    <span class="comment"># # ax2.plot(wavelengenth_array,b4_array*rad_target_itp,label="b4",color="#00FF00",linewidth=1)</span></span><br><span class="line">    <span class="comment"># ax2.set_xlabel("Wave lenghth") </span></span><br><span class="line">    <span class="comment"># ax2.set_ylabel("Spectral Radiance(μw/cm^2/nm/sr)")</span></span><br><span class="line">    <span class="comment"># plt.grid(True,which='y')</span></span><br><span class="line">    <span class="comment"># plt.legend(loc='upper right', prop=chinese)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ax1 = ax2.twinx()</span></span><br><span class="line">    plt.title(value.name+<span class="string">'\n'</span>, fontproperties = \</span><br><span class="line">            matplotlib.font_manager.FontProperties(fname=<span class="string">r"c:\windows\fonts\simhei.ttf"</span>, size = <span class="number">24</span>))</span><br><span class="line">    plt.xlim(<span class="number">300</span>, <span class="number">1130</span>)</span><br><span class="line">    plt.ylim()</span><br><span class="line">    ax1.axhline(<span class="number">0</span>)</span><br><span class="line">    ax1.axhline(<span class="number">100</span>)</span><br><span class="line">    ax1.plot(wavelengenth_array,b1_array,label=<span class="string">u"Modis光谱响应函数"</span>,color=<span class="string">'#00aaaa'</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">    ax1.plot(wavelengenth_array,b2_array,color=<span class="string">"#00aaaa"</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">    ax1.plot(wavelengenth_array,b3_array,color=<span class="string">"#00aaaa"</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">    ax1.plot(wavelengenth_array,b4_array,color=<span class="string">"#00aaaa"</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">    ax1.plot(wavelengenth_array,ref_itp,label=<span class="string">u"高光谱反射率"</span>,color=<span class="string">'black'</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">    ax1.plot(modisx,modisy,<span class="string">'-o'</span>, label=<span class="string">u"modis多光谱反射率"</span>,color=<span class="string">"#FF0000"</span>,linewidth=<span class="number">1</span>)</span><br><span class="line">    ax1.set_xlabel(<span class="string">"Wave lenghth"</span>) </span><br><span class="line">    ax1.set_ylabel(<span class="string">"Reflectance(%)"</span>)</span><br><span class="line">    <span class="comment"># plt.grid(True,which='both')</span></span><br><span class="line">    plt.legend(loc=<span class="string">'upper left'</span>, prop=chinese)</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    plt.savefig(os.path.join(value.dir,\</span><br><span class="line">            <span class="string">'picture'</span>,<span class="string">"modis"</span>+value.name+<span class="string">'.png'</span>), dpi=<span class="number">220</span>, bbox_inches=<span class="string">'tight'</span>)</span><br><span class="line">    <span class="comment">#plt.show()</span></span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
