{"meta":{"title":"WYX's Blog","subtitle":"偶尔写写东西","description":null,"author":"WuYuxuan","url":"https://wu-yuxuan.github.io","root":"/"},"pages":[{"title":"tags","date":"2019-07-15T03:28:39.000Z","updated":"2019-07-15T03:29:01.759Z","comments":true,"path":"tags/index.html","permalink":"https://wu-yuxuan.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-07-15T03:20:06.000Z","updated":"2019-07-15T03:20:40.148Z","comments":true,"path":"categories/index.html","permalink":"https://wu-yuxuan.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2019-07-14T13:03:54.000Z","updated":"2019-07-14T13:06:05.113Z","comments":true,"path":"2019/07/14/我的第一篇博客/","link":"","permalink":"https://wu-yuxuan.github.io/2019/07/14/我的第一篇博客/","excerpt":"","text":"第一章内容 第二章内容 参考文献","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-07-14T12:59:42.797Z","updated":"2019-07-14T12:59:42.797Z","comments":true,"path":"2019/07/14/hello-world/","link":"","permalink":"https://wu-yuxuan.github.io/2019/07/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"PSR-1100光谱仪数据处理","slug":"PSR-1100光谱仪数据处理","date":"2018-09-20T02:52:23.000Z","updated":"2019-07-11T04:00:00.000Z","comments":true,"path":"2018/09/20/PSR-1100光谱仪数据处理/","link":"","permalink":"https://wu-yuxuan.github.io/2018/09/20/PSR-1100光谱仪数据处理/","excerpt":"","text":"PSR1100光谱仪图像绘制代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153# -*- coding: utf-8 -*- # python 3.5.4import osimport reimport jsonimport numpy as np import matplotlib.pyplot as plt import matplotlibfrom decimal import Decimalclass PsrSpectrum(): def __init__(self, name, dir): try: self.loadasjson() except: self.name, self.dir = name, dir self.file2obj() # 转化sed文件到specturm对象，传入参数路径file_dir和名称file_name def file2obj(self): file = os.path.join(self.dir,self.name) #拼接得到文件路径 with open(file,'r') as f: content = [line.strip() for line in f] #使用strip()函数去除换行符 self.num = content[2][-9:-4] self.name = self.name[:-4] content = [tuple(l.replace(' ','').split('\\t')) for l in content] # 删除行中的空格，利用制表符\\t ，拆分字符串生成列表 self.Data = content[27:] #临时变量Dta包含实验数据 self.wvl, self.rad_ref, self.rad_target, self.ref = [], [], [], [] # 白板、地物光谱辐亮度rad_ref、rad_target,反射率ref for t in self.Data: #依次遍历 try: self.rad_target.append(100*float(t[2])) # 原光谱辐亮度数据单位是w/m^2/nm/sr，乘100转换为μw/cm^2/nm/sr self.rad_ref.append(100*float(t[1])) #s.ref.append((float(t[2])/float(t[1])),4) self.ref.append(float(((Decimal(t[2]) *100)/Decimal(t[1])))) # 利用Decimal模块控制精度 self.wvl.append(float(t[0])) except: self.ref.append(float(t[1])) self.wvl.append(float(t[0])) def loadasjson(self): with open(os.path.join(self.dir, 'json',self.name+'.json'),'r') as js: jsondict = json.load(js) self.name, self.dir, self.wvl, self.ref, self.rad_ref, \\ self.rad_target = jsondict['name'], jsondict['dir'], jsondict['wvl'], \\ jsondict['ref'], jsondict['rad_ref'], jsondict['rad_target'] print('Save as json done') def saveasjson(self): dict = &#123;'name':self.name, 'dir':self.dir, 'wvl':self.wvl, 'ref':self.ref, 'rad_ref':self.rad_ref, 'rad_target':self.rad_target&#125; with open(os.path.join(self.dir, 'json', self.name+'.json'),'w') as js: json.dump(dict,js) print('Save as json done') def list2array(self): array = &#123;&#125; array['wvl'] = np.array(self.wvl) #列表list转换为numpy数组array对象 array['ref'] = np.array(self.ref) try: array['rad_target'] = np.array(self.rad_target) array['rad_ref'] = np.array(self.rad_ref) except: array['rad_target'], array['rad_ref'] = None, None return array def plot_picture(self): #利用对象生成图表 # font = FontProperties(fname=r\"c:\\windows\\fonts\\simsun.ttc\", size=14) # myfont = matplotlib.font_manager.FontProperties(fname=r\"c:\\windows\\fonts\\simsun.ttc\") ary = self.list2array() fig = plt.figure(figsize=(18,6)) #新建绘图窗口figure，figsize是尺寸，单位英寸，还可加dpi=** ax1 = fig.add_subplot(121) #生成ax1坐标轴 plt.ylim(-10,120) #限定y轴坐标区间 ax1.plot(ary['wvl'],ary['ref'],label=\"$Reflectance$\",color=\"red\",linewidth=1) #绘图。标签label，颜色color，粗细linewidth ax1.axhline(0) ax1.axhline(100) ax1.set_xlabel(\"Wave lenghth(nm)\") #x轴标签 ax1.set_ylabel(\"Reflectance(%)\") #Y轴标签 plt.legend(loc = 'upper left') #图例legend位置 #标题 plt.title(self.name+'\\n', fontproperties = \\ matplotlib.font_manager.FontProperties(fname=r\"c:\\windows\\fonts\\simhei.ttf\",size = 24)) plt.grid(True,which='both') #网格 try: ax2 = fig.add_subplot(122) # ax2 = ax1.twinx() #同x轴异Y轴 plt.ylim(0,6.5) #限定y轴坐标区间 ax2.set_xlabel(\"Wave lenghth(nm)\") ax2.set_ylabel(\"Spectral Radiance(μw/cm^2/nm/sr)\") ax2.plot(ary['wvl'], ary['rad_target'], label=\"$Rad Target$\",color=\"blue\", linewidth=1) ax2.plot(ary['wvl'], ary['rad_ref'], label=\"$Rad Ref$\", color=\"010101\", linewidth=1) plt.grid(True) plt.legend(loc='upper right') except: pass plt.savefig(os.path.join(self.dir, 'picture', self.name+'.png'), dpi=220,bbox_inches='tight') #输出为图片 print(self.name+'done!') # plt.show() #绘出图像 plt.close() #释放对象def selectSed(fileToRecognize_list): #识别文件是否为sed文件 selected_list = [] for file in fileToRecognize_list: if re.match(r'^(.*)\\.sed$', file): selected_list.append(file) return selected_listdef get_spec_dict(dir): file_list = os.listdir(dir) file_list.sort() ######################## file_list = selectSed(file_list) spec_dict = &#123;&#125; for file in file_list: try: spec_dict[file] = PsrSpectrum(file, dir) print(spec_dict[file].name) except: pass return spec_dictif __name__ == '__main__' : dir = os.path.split(os.path.realpath(__file__))[0] spec_dict = get_spec_dict(dir) if spec_dict: try: os.makedirs(os.path.join(dir, 'picture')) except: pass try: os.makedirs(os.path.join(dir, 'json')) except: pass for key, value in spec_dict.items(): print('working\"'+key+\"\\\"\") value.plot_picture() value.saveasjson() print(\"\\nAll done!\") else: print(\"\\nDid not find any '.sed' files\") MODIS多光谱图像绘制代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108# -*- coding: utf-8 -*- # python 3.5.4# 2015180202022 吴禹萱import osimport numpy as np import scipy.interpolate as itpimport matplotlib.pyplot as plt import matplotlibimport scipy.interpolate as itpfrom decimal import Decimal from psr import PsrSpectrumfrom psr import get_spec_dictdef integrate(y,x): dx = x[1]-x[0] echelon = (y[1:]+y[:-1])*dx/2 area = sum(echelon) return areadir = os.path.split(os.path.realpath(__file__))[0] spec_dict = get_spec_dict(dir) with open(os.path.join(dir,r'MODIS.txt')) as f: content = [line.strip().split(' ') for line in f] content = content[6:] print(content) wavelengenth, band1, band2, band3 ,band4 = [], [], [], [],[]for l in content: print(l[0]) wavelengenth.append(1000*float(l[0])) band1.append(100*float(l[1])) band2.append(100*float(l[2])) band3.append(100*float(l[3])) band4.append(100*float(l[4]))print(wavelengenth)wavelengenth_array=np.array(wavelengenth)b1_array = np.array(band1)b2_array = np.array(band2)b3_array = np.array(band3)b4_array = np.array(band4)for key,value in spec_dict.items(): a = value.list2array() print(a['wvl']) fx = itp.interp1d(a['wvl'], a['ref'], 'cubic') ref_itp = fx(wavelengenth_array) print(ref_itp) fx = itp.interp1d(a['wvl'], a['rad_target'], 'cubic') rad_target_itp = fx(wavelengenth_array) # print(rad_target_itp) modisx = [465.8, 553.3, 654.8, 861.3] modisy = [integrate(b3_array*ref_itp,wavelengenth_array)/ \\ integrate(b3_array,wavelengenth_array), \\ integrate(b4_array*ref_itp,wavelengenth_array)/ \\ integrate(b4_array,wavelengenth_array), \\ integrate(b1_array*ref_itp,wavelengenth_array)/ \\ integrate(b1_array,wavelengenth_array), \\ integrate(b2_array*ref_itp,wavelengenth_array)/ \\ integrate(b2_array,wavelengenth_array), ] print(modisy) try: os.makedirs(os.path.join(dir, 'picture')) except: pass fig = plt.figure(figsize=(12,9)) chinese = matplotlib.font_manager.FontProperties(fname=r\"c:\\windows\\fonts\\simhei.ttf\") ax1 = fig.add_subplot(111) # plt.xlim(300, 1130) # plt.ylim() # # ax2.plot(wavelengenth_array,ref_itp,label=u\"高光谱反射率\",color='black',linewidth=1) # # ax2.plot(wavelengenth_array,rad_target_itp,label=u\"物体反射辐亮度\",color='blue',linewidth=1) # # ax2.plot(modisx,modisy,'-o', label=u\"modis多光谱反射率\",color=\"#FF0000\",linewidth=1) # # ax2.plot(wavelengenth_array,b3_array*rad_target_itp,label=\"b3\",color=\"#FF0000\",linewidth=1) # # ax2.plot(wavelengenth_array,b4_array*rad_target_itp,label=\"b4\",color=\"#00FF00\",linewidth=1) # ax2.set_xlabel(\"Wave lenghth\") # ax2.set_ylabel(\"Spectral Radiance(μw/cm^2/nm/sr)\") # plt.grid(True,which='y') # plt.legend(loc='upper right', prop=chinese) # ax1 = ax2.twinx() plt.title(value.name+'\\n', fontproperties = \\ matplotlib.font_manager.FontProperties(fname=r\"c:\\windows\\fonts\\simhei.ttf\", size = 24)) plt.xlim(300, 1130) plt.ylim() ax1.axhline(0) ax1.axhline(100) ax1.plot(wavelengenth_array,b1_array,label=u\"Modis光谱响应函数\",color='#00aaaa',linewidth=1) ax1.plot(wavelengenth_array,b2_array,color=\"#00aaaa\",linewidth=1) ax1.plot(wavelengenth_array,b3_array,color=\"#00aaaa\",linewidth=1) ax1.plot(wavelengenth_array,b4_array,color=\"#00aaaa\",linewidth=1) ax1.plot(wavelengenth_array,ref_itp,label=u\"高光谱反射率\",color='black',linewidth=1) ax1.plot(modisx,modisy,'-o', label=u\"modis多光谱反射率\",color=\"#FF0000\",linewidth=1) ax1.set_xlabel(\"Wave lenghth\") ax1.set_ylabel(\"Reflectance(%)\") # plt.grid(True,which='both') plt.legend(loc='upper left', prop=chinese) plt.savefig(os.path.join(value.dir,\\ 'picture',\"modis\"+value.name+'.png'), dpi=220, bbox_inches='tight') #plt.show() plt.close()","categories":[],"tags":[]}]}